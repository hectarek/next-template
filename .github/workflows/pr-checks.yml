name: üîç PR Quality Checks

on:
  pull_request:
    branches: [main, develop]
  pull_request_target:
    types: [opened, synchronize, reopened]

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality & Type Checking
  code-quality:
    name: üßπ Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üìö Checkout Repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: üì¶ Install Dependencies
        run: bun install --frozen-lockfile

      - name: üé® Check Prettier Formatting
        run: bun run format:check

      - name: üîç Run ESLint
        run: bun run lint

      - name: üè∑Ô∏è TypeScript Type Check
        run: bun run type-check

      - name: üèóÔ∏è Build Check
        run: bun run build

  # Job 2: Unit & Integration Tests
  unit-tests:
    name: üß™ Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üìö Checkout Repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: üì¶ Install Dependencies
        run: bun install --frozen-lockfile

      - name: üß™ Run Unit Tests
        run: bun run test --run

      - name: üìä Generate Coverage Report
        run: bun run test:coverage --run
        continue-on-error: true

      - name: üìà Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Job 3: End-to-End Tests
  e2e-tests:
    name: üé≠ End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üìö Checkout Repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: üì¶ Install Dependencies
        run: bun install --frozen-lockfile

      - name: üé≠ Install Playwright Browsers
        run: bunx playwright install --with-deps

      - name: üé≠ Run Playwright Tests
        run: bun run test:e2e
        env:
          CI: true

      - name: üì§ Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 4: Security & Dependency Check
  security:
    name: üîí Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üìö Checkout Repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: üì¶ Install Dependencies
        run: bun install --frozen-lockfile

      - name: üîç Run Security Audit
        run: bun audit
        continue-on-error: true

      - name: üõ°Ô∏è Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: üì§ Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Job 5: PR Comment with Results
  pr-comment:
    name: üí¨ PR Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, e2e-tests, security]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: üí¨ Comment PR Results
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üîç PR Quality Check Results')
            );

            const codeQuality = '${{ needs.code-quality.result }}';
            const unitTests = '${{ needs.unit-tests.result }}';
            const e2eTests = '${{ needs.e2e-tests.result }}';
            const security = '${{ needs.security.result }}';

            const getEmoji = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                default: return '‚ö†Ô∏è';
              }
            };

            const body = `## üîç PR Quality Check Results

            | Check | Status | Result |
            |-------|--------|---------|
            | Code Quality | ${getEmoji(codeQuality)} | ${codeQuality} |
            | Unit Tests | ${getEmoji(unitTests)} | ${unitTests} |
            | E2E Tests | ${getEmoji(e2eTests)} | ${e2eTests} |
            | Security | ${getEmoji(security)} | ${security} |

            ${codeQuality === 'success' && unitTests === 'success' && e2eTests === 'success' 
              ? 'üéâ **All checks passed!** This PR is ready for review.' 
              : '‚ö†Ô∏è **Some checks failed.** Please review the details above.'}

            ---
            *Automated by GitHub Actions* ‚Ä¢ [View Workflow](${context.payload.repository.html_url}/actions/runs/${context.runId})`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            } 